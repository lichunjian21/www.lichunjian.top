{"meta":{"title":"Andermu","subtitle":"心里有光哪都美","description":"暂时没想好","author":"Andermu","url":"http://lichunjian.top","root":"/"},"pages":[],"posts":[{"title":"","slug":"Docker学习","date":"2022-01-24T14:20:59.226Z","updated":"2021-11-14T14:03:04.000Z","comments":true,"path":"2022/01/24/Docker学习/","link":"","permalink":"http://lichunjian.top/2022/01/24/Docker%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"Docker学习 Docker概述 Docker 安装 Docker命令 镜像命令 容器命令 操作命令 … Docker镜像！ 容器数据卷！ DockerFile Docker网络原理 IDEA整合Docker Docker Compose Docker Swam CI\\CD jenkins Docker概述Docker 出现的背景环境配置十分麻烦，每个机器都需要配置环境，发布项目带上环境发布，不能跨平台。 Docker 的思想来自于集装箱 JRE–多个应用 隔离：Docke核心思想，打包箱子，每个箱子之间相互独立 Docker 通过隔离机制，可以将服务器利用到极致 Docker的历史2010年，几个年轻人在美国成立 dotcloud，做一些pass的云计算服去·a 2013年 Docker开源项目 每个月更新一个版本 2014年4月9日 Docker1.0发布 Docker十分火的原因是相对于传统的虚拟机技术来说，非常的轻便！ Docker的容器技术也是一种虚拟化技术 linux centos 原生镜像（相当于一台实体电脑）隔离需要多开虚拟机 docker：容器隔离，镜像机制（最核心的环境，4mb+jdk+mysql）十分小巧，运行镜像就行，运行速度非常的快 Docker 是基于Go语言开发的 Docker文档地址（Docker的文档是最为详细的）‘ Docekr仓库地址 gitpush pull Docker 作用 之前的虚拟机技术 虚拟化技术的缺点 1.资源占用十分的多 2.冗余步骤多 3.启动缓慢 容器化技术 容器化技术并不是一个完整的操作系统 比较虚拟机和Docker不同 传统虚拟机虚拟出一台硬件，运行一个完整的操作系统，然后再在这个操作系统上运行软件 容器内的应用直接运行在宿主机上，容器是没有自己的操作系统，也没有虚拟我们的硬件，所以更加轻便 每个容器间相互隔离，每个容器都有一个自己的文件系统，互不影响。 DevOps (开发，运维) 应用更快速的交付和部署 Docker：打包镜像发布测试，一键运行 更便捷的升级和扩缩容 使用Docker之后，我们部署应用之后就像搭积木 项目打包为镜像，扩展服务器 更简单的系统运维 在部署容器化后，开发运维都是一体化的 更高效的计算资源利用 Docker是内核级的虚拟化，可以在一个物理机上运行很多的容器实例，压缩物理性能到极致 Docker 安装Docker 的基本组成 镜像（image）: docker镜像就是一个模板，可以用这个镜像来创建容器服务，tomcat镜像===&gt;run ===&gt;tomcat01容器（提供服务） 容器（container)： Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的。 启动，停止，删除，基本命令 目前就可以将容器理解为一个简单的linux操作系统 仓库（container）： 仓库就是存放镜像的地方 仓库分为私有仓库和公有仓库 Dockerhub 阿里云…都有容器服务（配置容器加速） 安装Docker 环境准备 1.需要Linux基础 2.需要centos 环境查看 系统版本3.10以上 [root@VM-8-13-centos ~]# uname -r3.10.0-1160.11.1.el7.x86_64 [root@VM-8-13-centos /]# cat /etc/os-releaseNAME=”CentOS Linux”VERSION=”7 (Core)”ID=”centos”ID_LIKE=”rhel fedora”VERSION_ID=”7”PRETTY_NAME=”CentOS Linux 7 (Core)”ANSI_COLOR=”0;31”CPE_NAME=”cpe:/o:centos:centos:7”HOME_URL=”https://www.centos.org/&quot;BUG_REPORT_URL=”https://bugs.centos.org/&quot; CENTOS_MANTISBT_PROJECT=”CentOS-7”CENTOS_MANTISBT_PROJECT_VERSION=”7”REDHAT_SUPPORT_PRODUCT=”centos”REDHAT_SUPPORT_PRODUCT_VERSION=”7” 安装 帮助文档： 1234567891011121314151617181920212223242526#1.卸载旧版本sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine#2.需要的安装包yum install -y yum-utils#3.设置镜像的仓库sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo #默认镜像，非常慢sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #阿里云镜像，推荐使用#更新yum索引yum makecache fast #4.安装Docker相关内容 docker-ce 社区版 ee商业版yum install docker-ce docker-ce-cli containerd.io#5.启动Dockersudo systemctl start docker#6.使用docker version 查看安装成功 #7.查看hello-world docker run hello-world #8.查看下载的镜像 #9.卸载Docker 12345#1.卸载依赖yum remove docker-ce docker-ce-cli containerd.io#2.删除资源rm -rf /var/lib/docker# /var/lib/docker docker的默认工作路径 阿里云镜像加速1.登陆阿里云 2.找到镜像加速 3.配置使用 12345678sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123; &quot;registry-mirrors&quot;: [&quot;https://y2l7upc6.mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker 回顾hello-world流程 底层原理Docker是怎么工作的 Docker是一个Client-server结构，Docker的守护进程运行在主机上，通过socket从客户端访问 DockerServer接受DockerClient的指令，就会执行这个命令 Docker为什么比虚拟机要快 1.Docker有着比虚拟机更少的抽象层 2.Docker利用的宿主机的内核，vm需要GestOs 3.加载应用时Docker不用加载Guestos引导系统 Docker的常用命令123docker version #显示Docker的版本信息docker info #显示docker的系统信息，包括镜像和容器数量docker 命令 --help #帮助命令 帮助文档的地址 镜像命令docker images 查看本地的所有镜像 123456789101112131415[root@VM-8-13-centos ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEhello-world latest feb5d9fea6a5 7 weeks ago 13.3kB#解释REPOSITORY 镜像的仓库源TAG 镜像的标签IMAGE ID 镜像的IDCREATED 镜像的创建时间SIZE 镜像的大小#可选项-a, --all #列出所有镜像-q, --quiet #只显示镜像的ID docker search 搜索镜像 1234567891011121314151617[root@VM-8-13-centos ~]# docker search mysqlNAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 11676 [OK] mariadb MariaDB Server is a high performing open sou… 4448 [OK] mysql/mysql-server Optimized MySQL Server Docker images. Create… 867 [OK]# 可选项，通过收藏来过滤--filter=STARS=3000 #搜索出来STARS大于3000root@VM-8-13-centos ~]# docker search mysql --filter=STARS=3000NAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 11676 [OK] mariadb MariaDB Server is a high performing open sou… 4448 [OK] [root@VM-8-13-centos ~]# docker search mysql --filter=STARS=5000NAME DESCRIPTION STARS OFFICIAL AUTOMATEDmysql MySQL is a widely used, open-source relation… 11676 [OK] [root@VM-8-13-centos ~]# docker pull 下载镜像 123456789101112131415161718192021222324252627# 下载镜像 docker pull 镜像名[:tag][root@VM-8-13-centos ~]# docker pull mysqlUsing default tag: # 如果不写tag ，默认就是latestlatest: Pulling from library/mysqlb380bbd43752: Pull complete # 分层下载，docker image核心。联合文件系统f23cbf2ecc5d: Pull complete 30cfc6c29c0a: Pull complete b38609286cbe: Pull complete 8211d9e66cd6: Pull complete 2313f9eeca4a: Pull complete 7eb487d00da0: Pull complete 4d7421c8152e: Pull complete 77f3d8811a28: Pull complete cce755338cba: Pull complete 69b753046b9f: Pull complete b2e64b0ab53c: Pull complete Digest: sha256:6d7d4524463fe6e2b893ffc2b89543c81dec7ef82fb2020a1b27606666464d87 #签名Status: Downloaded newer image for mysql:latestdocker.io/library/mysql:latest #真实地址#等价于它docker pull mysqldocker pull docker.io/library/mysql:latest#指定版本下载docker pull mysql:5.7 docker rmi 删除镜像 123docker rmi -f 容器id #删除指定的容器docker rmi -f 容器id 容器id 容器id #删除多个指定容器docker rmi $(docker images -aq) #删除所有容器 容器命令说明：我们有了镜像才可以创建容器，linux,下载一个centos镜像来测试学习 1docker pull centod 新建容器并启动 1234567891011121314151617181920docker run [可选参数] image# 参数说明--name=&quot;Name&quot; 容器名字 tomcat01 tomcat02 用来区分容器-d 后台方式运行-it 使用交互方式运行，进入容器查看内容-p 指定容器的端口 -p 8080:8080 -p 主机端口：容器端口（常用） -p 容器端口 -p ip:主机端口:容器端口 容器端口-p 随机指定端口#测试，启动并进入容器[root@VM-8-13-centos ~]# docker run -it centos /bin/bash# 查看容器内的centos，基础版本，很多命令都是不完善的[root@a25ddb8ffed8 /]# lsbin etc lib lost+found mnt proc run srv tmp vardev home lib64 media opt root sbin sys usr#从容器中退回主机[root@a25ddb8ffed8 /]# exitexit 列出所有在运行的容器 12345678# docker ps 命令-a # 列出当前正在运行的容器+带出历史运行的容器-n=? #显示最近创建的容器-q # 只显示容器的编号[root@VM-8-13-centos ~]# docker ps -a -n=1CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESa25ddb8ffed8 centos &quot;/bin/bash&quot; 6 minutes ago Exited (0) 3 minutes ago intelligent_boyd 退出容器 12exit #直接停止容器并退出Ctrl +p+Q #容器不停止退出 删除容器 123docker rm 容器id #删除指定容器，不能删除正在运行的容器 强制 rm-fdocker rm -f $(docker ps -aq) #删除所有容器docker ps -a -q|xargs docker rm # 删除所有容器 启动和停止容器的操作 1234docker start 容器id # 启动容器docker restart 容器id # 重启容器docker stop 容器id # 停止当前正在运行的容器docker kill 容器id # 强制停止当前容器 常用其他命令后台启动容器 1234# 命令 docker run -d 镜像名docker run -d centos# Docker 容器使用后台运行时，必须得有前台进程，Docker发现没有应用，就会自动停止# 容器在启动后没有发现提供服务，就会自己自杀了 查看日志 123456docker logs -f -t --tail 容器# docker logs -f -t --tail 10 26e10421c383#显示日志-tf #显示日志--tail number #要显示的日志数目 查看容器中的进程信息 12345# 命令 docker top 容器id# root@VM-8-13-centos ~]# docker top 26e10421c383UID PID PPID C STIME TTY TIME CMDroot 7812 7792 0 10:12 pts/0 00:00:00 /bin/bash 查看镜像元数据 12docker inspect 容器id 进入当前正在运行的容器 12345678910111213141516171819202122232425262728# 通常容器使用后台方式运行，需要进入容器修改配置#命令 docker exec -it 容器id /bin/bash[root@VM-8-13-centos ~]# docker exec -it 26e10421c383 /bin/bashroot@qinglong:/ql $ ps -efPID USER TIME COMMAND 1 root 0:00 &#123;docker-entrypoi&#125; /bin/bash ./docker/docker-entrypoint.sh 46 root 0:26 PM2 v5.1.2: God Daemon (/root/.pm2) 73 root 0:00 nginx: master process nginx -c /etc/nginx/nginx.conf 74 root 0:00 nginx: worker process 75 root 0:00 nginx: worker process 100 root 1:31 node /ql/build/app.js 146 root 0:00 crond -f 6532 root 0:56 node /ql/build/schedule.js18791 root 0:00 bash /usr/local/bin/task zero205_JD_tencent_scf_main/jd_cfd_loop.js18885 root 0:00 timeout -k 10s 1h node jd_cfd_loop.js18886 root 0:01 node jd_cfd_loop.js18930 root 0:00 /bin/bash18936 root 0:00 ps -e#方式二docker attach 容器id [root@VM-8-13-centos ~]# docker attach 26e10421c383#区别# docker exec 进入容器后打开新终端，可以在里面操作# docker attach 进入容器正在执行的终端，不会启动新的终端 从容器中拷贝文件到主机上 12345678910docker cp 容器id:容器内路径 目的主机#查看当前主机目录下[root@VM-8-13-centos ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES82567a5b5724 centos &quot;/bin/bash&quot; About a minute ago Exited (0) 42 seconds ago optimistic_clarke7b7b26928cf9 centos &quot;/bin/bash&quot; 30 minutes ago Exited (0) 30 minutes ago competent_khayyam26e10421c383 whyour/qinglong:latest &quot;./docker/docker-ent…&quot; 12 hours ago Up 7 minutes 0.0.0.0:5700-&gt;5700/tcp, :::5700-&gt;5700/tcp qinglongade99ae17419 centos &quot;/bin/bash&quot; 29 hours ago Exited (0) 29 hours ago friendly_elgamal# 执行传输命令docker cp 82567a5b5724:/home/test.java /home 小结","categories":[],"tags":[]},{"title":"","slug":"正则表达式","date":"2022-01-24T14:20:50.070Z","updated":"2021-08-28T01:14:03.439Z","comments":true,"path":"2022/01/24/正则表达式/","link":"","permalink":"http://lichunjian.top/2022/01/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"正则表达式的学习1.正则语法正则表达式元字符和语法 2.正则处理函数","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-01-23T02:55:06.677Z","updated":"2022-01-23T02:55:06.677Z","comments":true,"path":"2022/01/23/hello-world/","link":"","permalink":"http://lichunjian.top/2022/01/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}